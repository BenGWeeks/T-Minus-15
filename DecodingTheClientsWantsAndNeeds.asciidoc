== Decoding the client's wants and needs

OK, first up, let's dive into the importance of getting a handle on what the client (whether internal or external) is expecting to be delivered as part of a project. If you don't understand the requirements, you're setting yourself up for a bumpy ride - so we best get this right!

=== The importance of clarity

It's important to ensure we're all on the same page to:

- *Prevent miscommunication*: One of the biggest challenges in any project is miscommunication. When you understand the requirements clearly, you can avoid misunderstandings and ensure that everyone is on the same page. This leads to a smoother project flow and reduces the risk of costly mistakes.
- *Improve outcome*: Understanding client requirements is critical to delivering a product that meets their expectations. If you don't understand the requirements, you may end up building something that is not aligned with the client's goals and objectives, resulting in dissatisfaction and a negative impact on your reputation.
- *Save time and resources*: Understanding requirements helps to avoid confusion and rework. If you are clear on what the client wants, you can get right to work on delivering it, instead of wasting time and resources on things that aren't necessary.

=== Getting the lowdown

In order to understand the clients requirements fully, don't be afraid to ask the client for more information. It's always better to clarify requirements upfront than to assume and risk making a mistake. The ability to keep asking questions until you fully understand the requirement is an important skill (and something we talk about later in hiring team members).

In order to keep on track with (sometimes changing) client requirements, it's important to work as a team with the client (stakeholders). They are an important member of the team and help ensure everyone is on the same page. This can include regular check-ins and status updates to ensure that requirements are being met and everyone is aligned.

Build a backlog: A backlog is a prioritized list of requirements that should always reflect your current understanding of what the client wants. It's important to keep the backlog up-to-date, so everyone involved has access to the same information. We cover more about backlogs later in the book.

Get visual: If possible (and applicable) create UX/UI wireframes and walk-throughs from which revisions of requirements can be given. The more senior the stakeholder - the more they like a pretty picture! However, using UX/UI tools is a great way to iterate quickly before even writing a line of code.

=== The Product Backlog

The Product Backlog is our single list of requirements for the business. It is a hierarchical list of Epics, Features, Tasks, Bugs and Improvements.

.Hierarchical structure of our product backlog. NB Risks and issues are held separately outside the hierarchy, but everything else should have a parent/child relationship.
image::Images/ProductBacklog.png[float=center,align=center]

These items can be prioritized into an order of delivery where the User Stories and above should only be updated with the consent of the Product Owner. The Scrum team will use the currency of Story Points to estimate the workload for items. We’ll cover Story Points later, but in essence they are a unit of prescribed varying sizes (a modified Fibonacci sequence) to help the team estimate work sizes. These estimates also help the Product Owner prioritize work items.

We also have the concept of “Enablers” for Epics, Features and Stories. Enablers are way of putting architectural, infrastructure, code refactoring, research, prototyping, compliance, and other work that users may regard as “invisible” but are important in delivering HVHQ solutions. To read more about enablers with regards to SAFeR please see https://www.scaledagileframework.com/enablers/.

In this methodology we recommend treating bugs and improvements and children of a Stories. That is, every bug should be related to a Story as should an Improvement.

“Pruning” the product backlog and keeping it an object of beauty is the reasonability of the team. The backlog gives clarity to the business and the team of the work that needs to be undertaken. You should ensure the product backlog is nicely populated (in terms of metadata for the various items), well structured (not a mess of items at any 1 particular level) and no orphaned items (e.g. bugs  and improvements that don’t belong to Stories).

=== Epics

Why do we need this epic? What value are we delivering to the business? These are the two important questions you need to ask about a project initiative before you start to figure out the “How”! The Epic is the overarching workload that we are taking to the customer (whether internal or external) for approval. Therefore, the budget holder needs it handed on a plate to them why they are approving this project! So, let’s make it easy for them. If possible, put in financial savings or other facts and figures that with help you win the pitch.

An Epic can be thought of as an initiative to be undertaken that will initially be a Minimum Viable Product (MVP). An Epic will be delivered through the use of lean start-up principles.

.An economic lean start-up strategy, enabling risk and investment incrementally, whilst allowing for flow, visibility and building with fast, integrated learning cycles as outlined in Principle 4 of SAFe^R^.
image::Images/LeanStartup.png[float=center,align=center]

To see the Epic metadata please see Appendix.

To find out more about Epics, please see https://www.scaledagileframework.com/epic/.

=== Features

A Feature is a unit of value to be delivered to the business. It is described as a feature and benefit. They are not written in a user story voice (“As a someone, I would like something”) as they typically support multiple roles. A Feature is undertaken by a single team and delivered during a release.

To see the Feature metadata please see Appendix.

To find out more about Features according to the SAFeR framework, please see https://www.scaledagileframework.com/features-and-capabilities/.

=== Stories

User Stories are requirements that are written in user readable language. Stories are the centrepiece of our requirements backlog. This is the requirement that the business are asking for, that the engineers build against and the test pilots validate against.

To see the User Story metadata please see Appendix.

=== Tasks

Tasks are activities that can be assigned to team members that are deemed necessary to fulfil a user story. All tasks should be carried out to meet a requirement. So think carefully if you have orphaned tasks as to why you are doing them. If there a missing requirement that you are aware of but haven’t documented?

To see the Task metadata please see Appendix.

===	Bugs and Enhancements

First thing, we need to set expectations with the client. Much as our lovely developers may try, there is no such thing as bug free software.

==== What is a Bug vs an Enhancement?

A bug is defined as a failure to meet a User Story and its acceptance criteria. This is an important distinction from Enhancements, which do not specifically represent a failure of a user story.

Enhancements are requests for new or improved functionality that wasn't originally part of the user story's acceptance criteria. By their nature, enhancements typically fall into the Minor or Cosmetic severity categories.

While we make the conceptual distinction between bugs and enhancements, we shouldn't get hung up on the classification. When working on a time and materials basis, we generally work in order of severity regardless of whether an item is classified as a bug or enhancement. The goal is to address the most critical issues first, then work our way down.

==== Severity Classification

Bugs are classified by severity to help with prioritization:

* *Critical*: Prevents the core functionality of the product from working. These must be fixed immediately.
* *Major*: Significantly impacts user experience but doesn't prevent core functionality. These should be fixed before release.
* *Minor*: Causes inconvenience but doesn't significantly impact the user experience. These can be scheduled for future releases.
* *Cosmetic*: Visual or UI issues that don't affect functionality. These have the lowest priority.

==== Tracking and Resolution

Bugs are tracked in the daily stand-up meetings to ensure visibility and timely resolution. The lifecycle of a bug includes:

1. *Reporting*: When raising a bug, the tester should:
   * Provide a clear, descriptive title that can be understood out of context (e.g., "Error after submitting registration form" rather than just "Server Error")
   * Document detailed steps to reproduce the issue
   * Include screenshots wherever possible
   * Assign the appropriate severity level

2. *Resolution*: All bugs MUST include a detailed resolution description before being closed. This should document:
   * The root cause of the bug
   * The specific changes made to resolve it
   * Any related components that were affected
   * Any knowledge that would be helpful if the bug reappears in the future

3. *Verification*: Bugs are verified as closed by the Tester, not the developer who fixed them.

==== Relationship to Features

A Feature should not be considered complete until all Critical and Major bugs related to it have been resolved. Minor and Cosmetic bugs may be scheduled for future releases at the Product Owner's discretion.

To see the Bug and Enhancement metadata please see Appendix.

=== Personas

Personas are a powerful tool in understanding client requirements. While traditionally defined as fictional characters representing user groups, we have a strong preference for basing our personas on real people whenever possible.

A persona represents the client's target audience and helps you understand their needs, goals, and motivations. By understanding who the product is for, you can better grasp which requirements are most important and prioritize accordingly. Creating personas allows you to empathize with users and design solutions that truly meet their needs.

By interviewing actual users, we gain invaluable insights into:

- Their day-to-day challenges and pain points
- The devices and technology they regularly use
- Their working environment and constraints
- Their technical proficiency and comfort level
- Their goals and what constitutes success for them

This research-based approach helps us build more accurate and nuanced personas. We typically interview 5-8 users from each major user group, looking for common patterns while also noting important variations.

When we capture user stories, these personas become the "who" in "As a [persona], I want to [action] so that [benefit]." Each user story should be clearly associated with at least one persona, ensuring we're building features that address real user needs.

_NB There must be a direct correlation between personas and user stories._

=== So, what does the client want?

We can categorize client requirements into these broad areas:

- *Business goals*: Understanding the client's business goals, objectives, and processes is critical to delivering a product that meets their needs. This can include understanding their target audience, their pain points, and what they hope to achieve with the product.
- *Features*: These are the specific functions (or group of requirements) that the product should do. It's important to prioritize these features.
- *Non-functional requirements*: This includes requirements like performance, scalability, and security, which define the overall quality of the product.

Enter MoSCoW: MoSCoW is a prioritization technique that categorizes requirements as Must Have, Should Have, Could Have, and Won't Have. This helps to prioritize what's most important to the client and focus on delivering the most essential requirements first. The MoSCoW method ensures that you focus on delivering what's most important to the client, so you can keep them happy and deliver a product that meets their needs.

In conclusion, understanding client requirements is critical to delivering a successful project. By asking questions, working as a team, building a backlog, using MoSCoW to prioritize, and being aware of the different types of requirements, you can ensure that you deliver a product that meets the client's expectations and exceeds their needs. Remember, happy clients lead to more business and a better reputation, so make sure you understand their requirements and prioritize them accordingly.

