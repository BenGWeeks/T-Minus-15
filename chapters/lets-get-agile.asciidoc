== Let's get Agile!

=== Why do we need to be Agile?

Let's face it – every company is a software company now{empty}footnote:[Microsoft CEO Satya Nadella on fuelling 'tech intensity' in the UK, https://news.microsoft.com/en-gb/2018/11/07/microsoft-ceo-satya-nadella-on-fuelling-tech-intensity-in-the-uk/]. Just check out who's running the show: Microsoft, Apple, Amazon, and Google top the market cap charts{empty}footnote:[List of public corporations by market capitalization, https://en.wikipedia.org/wiki/List_of_public_corporations_by_market_capitalization#2019]. But slapping "digital transformation" on a PowerPoint doesn't cut it – just ask GE, Intel, P&G, and HP who dumped truckloads of cash into IT with nothing to show for it.

Survival today requires speed and adaptability. Your competitors are already moving faster than you, whether they're industry giants or the startup that didn't even exist last year. Airbnb, Lyft, Tesla – they're eating established players for breakfast not because they have better funding, but because they ship faster.

Here's the cold, hard truth: the corporate graveyard is filling up fast. According to Yale professor Richard Foster, S&P500 company lifespans have crashed from 67 years in the 1920s to just 15 years today{empty}footnote:[Creative Destruction Whips through Corporate America, https://engageinnovate.files.wordpress.com/2012/03/creative-destruction-whips-through-corporate-america_final2012.pdf]. That's right – the S&P500 replaces a company every two weeks. If you're comfortable with your current pace, congratulations on your upcoming obsolescence. If you're a hungry newcomer, there's never been a better time to take someone's lunch.

.Creative Destruction Whips through Corporate America
image::images/average-company-lifespan.png[float=center,align=center,link=https://engageinnovate.files.wordpress.com/2012/03/creative-destruction-whips-through-corporate-america_final2012.pdf]

=== Overview of Agile

Forget everything you know about traditional software projects where you plan for six months, build for a year, then pray it works. Agile flips that on its head. It's about business and tech folks collaborating daily to evolve software that actually solves real problems.

Don't waste time drafting perfect blueprints for a building that might need to be a boat by the time you're done. Instead, build something small that works now. Get it in front of real users. Learn from their feedback. Repeat. Those early deliverables aren't just checkboxes – they create clarity for everyone about what really matters and what doesn't.

=== The Agile Manifesto

The Agile Manifesto isn't just some dusty document – it's the battle cry that changed how we build software. At its core, it's about delivering value early and often. Not next year. Not next quarter. Now.

Break work into 2-3 week sprints and ship something meaningful at the end of each one. Each sprint gives your customers a chance to say "That's not quite what I meant" before you've gone too far down the wrong path. Trust me – they will say that, and it's much better to hear it after two weeks than after two years.

Stop separating "business people" and "tech people" – they need to be in the same room, solving problems together. Give your team the tools, trust, and environment they need to make smart decisions. Then get out of their way.

Meet for 15 minutes every day, standing up (yes, actually standing if you have a physical place of work – it keeps things brief). This isn't a status update for managers; it's team coordination. Each person answers three quick questions: What did I finish yesterday? What am I tackling today? What's blocking me? If someone's stuck, the team jumps in to help after the meeting – not during it.

Your roadmap lives in the product backlog – a prioritized list of Features (what users actually need, not what IT thinks they want). Before each sprint, grab the highest-priority Features your team can realistically finish. And when the sprint ends, sit down for a 30-minute retrospective where you ask: What went well? What didn't? What will we change next time? Then actually make those changes.

The Agile Manifesto{empty}footnote:[Manifesto for Agile Software Development, http://agilemanifesto.org/] declares following values: 

1. Individuals and Interactions over processes and tools
2. Working Software over comprehensive documentation
3. Customer Collaboration over contract negotiation
4. Responding to Change over following a plan

The Agile Manifesto Principles{empty}footnote:[Agile Manifesto Principles, http://agilemanifesto.org/principles.html] these values are built on are:

1. Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.
2. Welcome changing requirements, even late in development. Agile processes harness change for the customer's competitive advantage.
3. Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale.
4. Business people and developers must work together daily throughout the project.
5. Build projects around motivated individuals. 
6. Give them the environment and support they need, and trust them to get the job done.
7. The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.
8. Working software is the primary measure of progress.
9. Agile processes promote sustainable development. 
10. The sponsors, developers, and users should be able to maintain a constant pace indefinitely.
11. Continuous attention to technical excellence and good design enhances agility.
12. Simplicity--the art of maximizing the amount of work not done--is essential.
13. The best architectures, requirements, and designs emerge from self-organizing teams.
14. At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behaviour accordingly.

However, within a larger Enterprise SAFeR believes that “best architectures, requirements, and designs” do not necessarily  emerge from self-organizing teams in contrast to the Agile principles. For an Enterprise, you need to have a common design principle across all teams and that is why this function is therefore proposed to be driven from outside of the team by Enterprise, Solution, and System Architects/Engineers.

=== The Pro's and Con's of Agile

Let's be real – Agile isn't fairy dust you sprinkle on a project to make it magically successful. It has trade-offs, and in some cases (like building nuclear reactors or medical devices), you might want something more rigidly defined. Here's the unvarnished truth:

.The No-BS Guide to Agile Trade-offs
|===
|What You Gain|What You Give Up

| Skip the 3-month design phase and start building immediately. Change direction when needed without massive rewrites.
| You won't have a 200-page spec document. Some stakeholders get nervous without this security blanket.

| Get working software in front of users in weeks, not years. See their reactions and pivot before you've sunk too much cost.
| The first version won't match the picture in everyone's head. Some folks will panic when reality meets expectations.

| Find and fix bugs continuously while the code is fresh in developers' minds.
| Perfect, bug-free software is a myth anyway, but Agile makes this more visible. Get comfortable with continuous improvement.
|===

=== Agility for the Enterprise

As outlined in 'Thinking of Building a Cloud Operating Model'{empty}footnote:[Thinking of Building a Cloud Operating Model, https://www.amazon.co.uk/Thinking-Building-Microsoft-Operating-Questions/dp/1907453237] from Dan Scarfe et al (I couldn't have said it better myself!):

_Having teams operating using an Agile methodology is great, but how does an enterprise facilitate these teams working in this new framework? How can the enterprise manage these teams and ensure that value is being delivered across the organisation and have a high-level overview of what is happening?_

_This is where the SAFeR is a framework for managing multiple business-focussed streams of work within an enterprise. A kind of backlog of backlogs. It defines these within the context portfolios of epics or major initiatives. An epic might be a new product that you want to launch. It might be a major technology refresh programme you want to undertake. It might be a new market you want to enter. It can be anything._

_SAFeR provides a mechanism to manage and then prioritize these major initiatives and provide a bridge into both the IT and business teams that might enable this epic to be delivered._

_Underneath the portfolio (epic) level is the program level. Epics are just that, epic! Each epic is broken down into a series of features and enablers which are grouped into a program increment, which is a time-bound period where you deliver some form of business value. This value is managed by an agile release train. Within each program increment, you have a number of scrum teams who actually deliver the work. Over, you'll see a diagram showing the high-level view of this process._

_The thing that is most interesting about SAFeR is its applicability across such a broad range of initiatives you might be running an as organisation. The fact that by using SAFeR, Agile can be applied to far more than just software development. Agile budgeting and planning can now be used to represent and manage the entire innovation pipeline within your organisation._

_As an IT organisation, your responsibility becomes standing up, feeding and watering a given number of downstream agile sprint teams. These multi-disciplinary teams will span different technologies. They will have different skillsets. They will do different things. But they will be there, willing and able, to work through the constant stream of requirements. No more functional requirement. No more detailed business cases. No more friction between the business and IT. Peace, and hopefully, harmony._

_This brief description doesn't begin to do justice to the intricacies, or power, of SAFeR. When you fully understand it and see it in action, you will appreciate its power and how useful it can be. For more information on SAFeR, please see www.scaledagile.com._

=== Scrum

Getting back to the team again. Agile software development methodology covers a range of specific practices such as Kanban, Extreme Programming, Lean software development and Scrum for example.
Scrum gives some additional practices to our Agile method ideally suited to software development teams of around 5 to 10 team members utilizing practices such as sprints and daily stand-ups (or daily scrums). It uses iterative sprints of 2 to 4-weeks where a team takes a set of requirements (the sprint backlog taken from a larger product backlog).

.An overview of Scrum
image::images/scrum.png[float=center,align=center]

=== Kanban vs Scrum

Whilst Scrum is organised into Sprints of a few weeks, Kanban is more about seeing progression in work done. We use Kanban to see progression of Stories, Features and Epics. With Kanban, the  focus is more on the flow of workload. Some projects are better suited to Kanban if they are very iterative. For example, quite often Power BI projects I have worked on have better suited Kanban where there is a lot of back and forth with a stakeholder on getting a report “just right” with change being the word, and it's therefore not always possible to organise a “sprints” worth of requirements because of the nature of the work. In addition, this work is often carried out by a single person and doesn't warrant the overhead of the various scrum roles.

Alternatively, if you want that member to be part of a team (perhaps delivering a different Feature or set of Stories to the rest of the team, but working in the same sprint) you could define a rather loose Story of “I want a certain report” with tasks underneath that move across more like a Kanban board. Our daily stand-up boards are essentially Kanban boards after all, just we have Stories.

Although the majority of the methodology is geared towards Scrum, consider that there may be instances where just running Kanban could be better suited for some workloads.

=== Sprints

Sprints are your rhythm. They create focus, urgency, and most importantly, a finish line. Every sprint tracks measurable progress through Stories, Tasks, Improvements, and Bugs.

We group sprints into four distinct flavors. Don't get too rigid about these categories – they're guidelines, not handcuffs:

**Prep & Design Sprint** (aka Sprint 0) – This is where you build your launchpad. Capture requirements, sketch wireframes, draft technical designs, and nail down your visual identity. Don't skip this! Teams that dive straight into coding without this foundation end up rebuilding everything twice.

**Engineering Sprints** – These are your bread and butter. Most of your sprints will be here, focusing on building actual working software. Set clear goals for each sprint that deliver tangible value, not just "we worked on the database."

**Testing Sprints** – Every 3-4 engineering sprints, dedicate a sprint to intensive quality work. Wait, aren't we testing all along? Absolutely! But these special sprints let you tackle technical debt, shore up your test automation, and fix those edge cases everyone's been avoiding.

**Operational Sprint** – This is your countdown to liftoff. Documentation, training materials, final performance tweaks – everything needed to go live with confidence happens here. For larger projects, you might have several of these as you release incremental value.

In T-Minus-15, we've found that 15 working days (3 weeks) hits the sweet spot. Two-week sprints often feel rushed with too much overhead, while four weeks lets people lose focus. But hey – if T-Minus-10 or T-Minus-20 works better for your team, adjust accordingly. The goal is finding a rhythm that lets your team build momentum without burnout.

Yes, you still need a high-level roadmap – stakeholders crave it and it helps align everyone. Create a simple Gantt chart showing your sprint sequence with key milestones like "UAT 1", "UAT 2", "Public Release." But here's the key: ditch the massive "BIG BANG LAUNCH DAY" mentality. Instead, plan for incremental releases where you get real value into production early and often.

Smart teams separate their technical release dates from their marketing announcements. Release to production when the feature is solid, then announce it publicly after you've confirmed everything works in the real world. That gap might be days or weeks – but that buffer can save your reputation when surprises pop up (and they will).

.A simple Gantt Chart of the Epic MVP release. Note that the delivery plan doesn't need to get much more detailed than this.
image::images/gantt-chart.png[float=center,align=center]

As an aside, in line with SAFe^TM^ you may also have an Innovation & Planning (IP) sprint. This sprint _acts as an estimating buffer for meeting PI Objectives and provides dedicated time for innovation, continuing education, PI Planning, and Inspect and Adapt (I&A) events_{empty}footnote:[Innovation & Planning Iteration, https://www.scaledagileframework.com/innovation-and-planning-iteration/]. For more information on IP sprints, see https://www.scaledagileframework.com/innovation-and-planning-iteration/.

=== The Sprint Burndown

The Sprint Burndown Chart gives the team a quick graphical representation of the remaining work left in that sprint. It shows us in a view if the team are on track to deliver the promised functionality by the end of the sprint. The ideal burn down diagonal is shown in white and the actual remaining effort (typically shown in hours) in the green bars.

.Representation of the sprint burndown chart.
image::images/burndown-chart.png[float=center,align=center]

What does the burndown chart above tell us? Well, it looks like the team had a little bit of a slow start, then picked up speed and got ahead of schedule. They then hit some blockers by the looks of it and started to slip behind schedule, but managed to pick it up with a good effort at the end and completed the sprint. 

If a team is evidently not on track to deliver the effort estimated by the end of the sprint, the scrum master must approach the product owner to discuss the options available, namely:

1. To descope functionality (Stories) from this sprint, or,
2. To extend the sprint to allow for time to complete the work.

This can be a difficult conversion and one of the sought after skills of a scrum master to tackle this event head-on. The scrum master (and team) needs to address this head on weekly in the checkpoint meeting (rather than leaving it to the end of the project!). This is the primary reason why the weekly checkpoint meeting is indeed weekly (and not just at the end/start of sprints).

=== Risks & Issues

We track risks and issues throughout the project lifecycle. The Planner typically takes ownership of tracking these items, updating the team during daily stand-ups until they are closed. 

Only risks and issues with significant impact or those requiring stakeholder intervention should be raised during the weekly T-Minus-15 Checkpoint meeting. We shouldn't burden stakeholders with routine problems the team can handle internally. This focused approach ensures stakeholders can concentrate on strategic matters while the team maintains ownership of tactical challenges.

This filtering process ensures that stakeholder time is respected while still providing them with the information they need to make important decisions or remove obstacles beyond the team's control.

Let's take a closer look at the difference between risks and issues.

=== What is a risk?

A risk is something that has the potential to occur with negative consequences. Remember, we can't mitigate risks until we identify them first! Keep your ears open in meetings - that's where risks often surface.

For each risk, we need to consider three things: potential impact, likelihood of occurrence, and most importantly, steps we can take to mitigate it. I've seen cases where risks were identified but no mitigation was performed, and sure enough, the risk turned into an actual issue.

An example: _"During our SpaceX launch planning, the team mentioned potential fuel line leaks in cold weather conditions."_ Once identified, we developed our mitigation: _"We added extra thermal inspections 24 hours before launch and trained a rapid response team specifically for fuel emergencies."_

This simple approach - identify then mitigate - saved SpaceX from potential launch delays and millions in repair costs. The key was catching it early in those team discussions!

=== What is an issue?

An issue is something that has already occurred - it's a project-level problem, not a technical bug in the code. Think of it as a risk that became reality or a significant project obstacle. While bugs affect functionality, issues impact timelines, resources, and overall project delivery.

For these project issues, we focus on two key aspects: impact assessment (how does this affect our timeline and deliverables?) and mitigation (what steps will get us back on track?).

An example: _"During the SpaceX Starship project, a key supplier went bankrupt, leaving us without critical components."_ This is a project issue, not a technical bug. Our response: _"We immediately assessed inventory, identified alternative suppliers, expedited new contracts, and adjusted the project timeline to accommodate the 3-week delay."_

Project issues need urgency and ownership. Always assign someone responsible for resolving each issue, set clear deadlines, and follow up consistently. The longer an issue remains unresolved, the more impact it typically has on your project timeline and budget.
=== Story point estimation

// This needs updating

To calculate the total story points that can be carried out in a sprint, we have to appreciate that the engineering time is not the only time required to size a user story! Use the following formula to calculate the total effort for a Story:

.This is a general formula for calculating the total effort involved for a Story.
image::images/estimating.png[float=center,align=center]

From the above, in summary the total effort is approximately twice the engineering effort we put in the Story Points. This is useful for calculating the total effort for Features and capacity of Sprints. As a general rule for example, you can see that for every 4 Engineers, on average you're going to need 1 Test Pilot.

=== Kanban boards

We use Kanban boards to track progress of Stories, Features and Epics. A Kanban board is simply a visual representation to view the progress of items with columns relating to the progression of states and items related as cards on that board.

// INSERT

Stories in particular also have a 'Definition of done' for each column that we will look at in section

=== Rules

Who and how do we update items in the backlog? Here are our work items rules:

1. Only the Epic Owner can update an Epic.
2. Only the Business Owner can update a Feature.
3. Only the Prepper and Scrum Master can update User Stories.
4. The scrum master is responsible for closing a Story.
5. There should be no time remaining for Closed items children.
6. All members of the A-Team should have specific tasks in the sprint.
7. Stories can only be set to "Done" when they meet their definition of done for the relevant statuses.
8. The Test Pilot and Tech Lead is responsible for confirming a release is ready for Production.

=== States

All items in the product backlog have various states associated with them to track progress on a Kanban board. In the T-Minus-15 methodology we use the following states:

// CREATE TABLE

=== Definition of done

As your team update the states of work items on a Kanban board, it's important to agree with what we mean by “done”. By specifying what we call a “Definition of Done” for each column in the Kanban board it is clear for all the team as to what the acceptance of the item being complete is.

// CREATE TABLE

In the T-Minus-15 methodology we declare the Definition of Done for Stories as follows:

// CREATE TABLE

=== WIP limits

Work-In-Progress (WIP) limits are used to impose limitations on the number of items that can be moved into active progress. Therefore, items must be moved out of the active state before the next item can be brought in.

WIP limits are important to ensure that the team do not undertake hundreds of items to work on (because you have to say “yes” right?!), but actually complete only a rather small fraction of these. Much better to release a smaller amount of high-quality high-value (HQHV) than a large amount of low-quality. Working on too many items simultaneously will mean the team are not focused on ensuring each work item is high value.

In actual fact, having a WIP limit enables you to deliver things quicker. Think of juggling. I can juggle 1 to 3 balls pretty well and quickly. If I were to try to juggle 4 or 5 balls, I wouldn't be very effective at juggling because I would actually spend most of my time picking the balls up rather than juggling!

So, next time as a team member you get asked “can you start this” you can say “I would love to, but I've hit my WIP limit, so will prioritize that next” (something along those lines!).

So what WIP limits should you actually use? Start simple: 2 features per engineer. For example, if you have two engineers, cap the "Engineering" column at 4 features max. Tools like Azure DevOps make this dead simple to set up on your Kanban boards.

// CREATE TABLE

"But what happens when our developers finish coding 4 features and the testing column is already maxed out?"

That's exactly the point! Now your developers have three options, all better than starting something new:

1. Pair up with a tester to help clear the bottleneck
2. Do peer code reviews to improve quality
3. Tackle tech debt or automated tests

This is where T-shaped skills (which we'll cover later) really shine. When everyone has at least basic competency in adjacent skills, the team can flex to where the work is piling up.

The payoff for proper WIP limits is massive:

* Your team actually finishes stuff instead of having 15 half-done features
* Developers don't lose context by task-switching (which can waste up to 40% of productive time)
* Code reviews happen while the code is fresh in everyone's mind
* Smaller, frequent merges to main mean fewer nasty merge conflicts
* Teams naturally collaborate instead of working in silos

Fill out your specific WIP limits in the template we've provided in the Appendix. Put them on display where everyone can see them, and stick to them religiously for at least 3 sprints before making adjustments.

